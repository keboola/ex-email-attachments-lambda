service: "${env:SERVICE_NAME}"

plugins:
  - serverless-plugin-existing-s3

provider:
  name: aws
  region: ${env:REGION}
  stage: ${env:STAGE}
  runtime: provided
  memorySize: 128
  timeout: 30
  versionFunctions: false
  deploymentBucket:
    name: "${env:SERVICE_NAME}-${env:REGION}-deployment"
  environment:
    DYNAMO_TABLE: ${env:DYNAMO_TABLE}
    S3_BUCKET: ${env:S3_BUCKET}
    EMAIL_DOMAIN: ${env:EMAIL_DOMAIN}
  cfnRole: ${env:CLOUDFORMATION_ROLE_ARN}
  role: ${env:LAMBDA_EXECUTION_ROLE_ARN}
  stackTags:
    KeboolaStack: ${env:KEBOOLA_STACK}
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "s3:PutBucketNotification"
       Resource:
         - "arn:aws:s3:::${env:S3_BUCKET}"

package:
  include:
    - handler.php
    - src/**
    - vendor/**
  exclude:
    - test
    - node_modules/**
    - .env
    - .env.template
    - .travis.yml
    - cf-stack.yml
    - docker-compose.yml
    - Dockerfile
    - package.json
    - yarn.lock
    - README.md

functions:

  s3Handler:
    handler: handler.handler
    layers:
      - arn:aws:lambda:eu-west-1:061240556736:layer:lambda-php73-sha256-3ee2fd2fab4250f66d6cb2a3ccc00faba7c952eb8c42a3d819046a2161919c94:1
    tags:
      KeboolaStack: ${env:KEBOOLA_STACK}
    events:
      -
        existingS3:
          bucket: "${env:S3_BUCKET}"
          events:
            - "s3:ObjectCreated:*"
          rules:
            - prefix: _incoming/

